<?php

namespace App\Repository;

use Doctrine\ORM\Query\Expr;

/**
 * ClubJugadorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClubJugadorRepository extends \Doctrine\ORM\EntityRepository {

	public function getQbAll() {
		$qb = $this->createQueryBuilder( 'cj' );

		return $qb;
	}

	public function getQbByClub( $club ) {
		$qb = $this->createQueryBuilder( 'cj' );

		$qb->where( 'cj.club = :club' );
		$qb->andWhere( 'cj.anio = :anio' );


		$qb->setParameter( 'club', $club );
		$qb->setParameter( 'anio', date( 'Y' ) );


		return $qb;
	}

	public function getQbRegistroJugadores( $club ) {
		$qb = $this->createQueryBuilder( 'cj' );

		$qb->where( 'cj.club = :club' );
		$qb->andWhere( 'cj.anio = :anio' );

		$qb->andWhere( 'cj.confirmadoClub = false' );
//		$qb->andWhere( 'cj.confirmadoUnion = false' );


		$qb->setParameter( 'club', $club );
		$qb->setParameter( 'anio', date( 'Y' ) );


		return $qb;
	}

	public function getQbBuscarRegistroJugadores( $data, $club ) {
		$qb = $this->createQueryBuilder( 'cj' );

		$qb->where( 'cj.club = :club' );
		$qb->andWhere( 'cj.anio = :anio' );

		$qb->andWhere( 'cj.confirmadoClub = false' );

		$qb->setParameter( 'club', $club );
		$qb->setParameter( 'anio', date( 'Y' ) );

		$qb->innerJoin( 'cj.jugador', 'j' );
		$qb->innerJoin( 'j.persona', 'persona' );
		if ( isset( $data['nombre'] ) ) {

			$nombre = $data['nombre'];
			$qb
				->andWhere( "upper(persona.nombre) like upper(:nombre)" );
			$qb->setParameter( 'nombre', '%' . $nombre . '%' );
		}

		if ( isset( $data['apellido'] ) ) {

			$apellido = $data['apellido'];
			$qb
				->andWhere( "upper(persona.apellido) like upper(:apellido)" );
			$qb->setParameter( 'apellido', '%' . $apellido . '%' );
		}

		if ( isset( $data['numeroIdentificacion'] ) ) {
			$numeroIdentificacion = $data['numeroIdentificacion'];

			$qb
				->andWhere( "upper(persona.numeroIdentificacion) like upper(:numeroIdentificacion)" );
			$qb->setParameter( 'numeroIdentificacion', '%' . $numeroIdentificacion . '%' );
		}

		if ( isset( $data['posicion'] ) ) {
			$posicion = $data['posicion'];

			$qb->andWhere(
				$qb->expr()->orX(
					$qb->expr()->eq( 'j.posicionHabitual', ':posicionHabitual' ),
					$qb->expr()->eq( 'j.posicionAlternativa', ':posicionAlternativa' ),
					$qb->expr()->eq( 'j.segundaPosicionAlternativa', ':segundaPosicionAlternativa' )

				)
			);

			$qb->setParameter( 'posicionHabitual', $posicion );

			$qb->setParameter( 'segundaPosicionAlternativa', $posicion );

			$qb->setParameter( 'posicionAlternativa', $posicion );
		}


		return $qb;
	}

	public function getCountNuevosFichajes( $club ) {
		$qb = $this->createQueryBuilder( 'cj' );


		$qb->where( 'cj.club = :club' );
		$qb->andWhere( 'cj.anio = :anio' );
		$qb->andWhere( 'cj.confirmado = true' );
		$qb->andWhere( 'cj.confirmadoClub = false' );
//		$qb->orWhere( 'cj.confirmadoUnion = false' );

		$qb->setParameter( 'club', $club );
		$qb->setParameter( 'anio', date( 'Y' ) );


		return $qb->getQuery()->getResult();
	}

	public function getCountAllNuevosFichajes() {
		$qb = $this->createQueryBuilder( 'cj' );
		$qb->select( 'COUNT(cj.id)' );


		$qb->andWhere( 'cj.anio = :anio' );
		$qb->setParameter( 'anio', date( 'Y' ) );

		$qb->andWhere( 'cj.confirmadoUnion = false' );


		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getCountAllJugadores() {
		$qb = $this->createQueryBuilder( 'cj' );
		$qb->select( 'COUNT(cj.id)' );


		$qb->andWhere( 'cj.anio = :anio' );
		$qb->andWhere( 'cj.confirmado = true' );
		$qb->andWhere( 'cj.confirmadoClub = true' );
		$qb->orWhere( 'cj.confirmadoUnion = true' );

		$qb->setParameter( 'anio', date( 'Y' ) );


		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getCountJugadores( $club ) {
//		$qb = $this->createQueryBuilder( 'cj' );
//
//
//		$qb->where( 'cj.club = :club' );
//		$qb->andWhere( 'cj.anio = :anio' );
//		$qb->andWhere( 'cj.confirmado = true' );
//		$qb->andWhere( 'cj.confirmadoClub = true' );
//		$qb->andWhere( 'cj.confirmadoUnion = true' );
//
//		$qb->setParameter( 'club', $club );
//		$qb->setParameter( 'anio', date( 'Y' ) );
//
//
//		return $qb->getQuery()->getResult();


	}

	public function getQbByUnion() {
		$qb = $this->createQueryBuilder( 'cj' );

		$qb->select( 'cj.id' );

		$qb->andWhere( 'cj.anio = :anio' );

		$qb
			->andwhere( 'cj.confirmado = true' )
			->andwhere( 'cj.confirmadoClub = true' )
			->andwhere( 'cj.confirmadoUnion = true' );

		$qb2 = $this->createQueryBuilder( 'cj2' );
		$qb2->where(
			$qb2->expr()->notIn( 'cj2.id', $qb->getDQL() )
		);

		$qb2->setParameter( 'anio', date( 'Y' ) );


		return $qb2;
	}

	public function getQbBuscarByUnion( $data ) {
		$qb = $this->createQueryBuilder( 'cj' );

		$qb->select( 'cj.id' );

		$qb->andWhere( 'cj.anio = :anio' );

		$qb
			->andwhere( 'cj.confirmado = true' )
			->andwhere( 'cj.confirmadoClub = true' )
			->andwhere( 'cj.confirmadoUnion = true' );

		$qb2 = $this->createQueryBuilder( 'cj2' );
		$qb2->where(
			$qb2->expr()->notIn( 'cj2.id', $qb->getDQL() )
		);

		$qb2->setParameter( 'anio', date( 'Y' ) );


		$qb2->innerJoin( 'cj2.jugador', 'j' );
		$qb2->innerJoin( 'j.persona', 'persona' );

		if ( isset( $data['nombre'] ) ) {

			$nombre = $data['nombre'];
			$qb2
				->andWhere( "upper(persona.nombre) like upper(:nombre)" );
			$qb2->setParameter( 'nombre', '%' . $nombre . '%' );
		}

		if ( isset( $data['apellido'] ) ) {

			$apellido = $data['apellido'];
			$qb2
				->andWhere( "upper(persona.apellido) like upper(:apellido)" );
			$qb2->setParameter( 'apellido', '%' . $apellido . '%' );
		}

		if ( isset( $data['numeroIdentificacion'] ) ) {
			$numeroIdentificacion = $data['numeroIdentificacion'];

			$qb2
				->andWhere( "upper(persona.numeroIdentificacion) like upper(:numeroIdentificacion)" );
			$qb2->setParameter( 'numeroIdentificacion', '%' . $numeroIdentificacion . '%' );
		}

		if ( isset( $data['posicion'] ) ) {
			$posicion = $data['posicion'];

			$qb2->andWhere(
				$qb2->expr()->orX(
					$qb2->expr()->eq( 'j.posicionHabitual', ':posicionHabitual' ),
					$qb2->expr()->eq( 'j.posicionAlternativa', ':posicionAlternativa' ),
					$qb2->expr()->eq( 'j.segundaPosicionAlternativa', ':segundaPosicionAlternativa' )

				)
			);

			$qb2->setParameter( 'posicionHabitual', $posicion );

			$qb2->setParameter( 'segundaPosicionAlternativa', $posicion );

			$qb2->setParameter( 'posicionAlternativa', $posicion );
		}


		if ( isset( $data['club'] ) ) {

			$club = $data['club'];

			$qb2->andWhere( 'cj2.club = :club' )
			    ->setParameter( 'club', $club );

		}


		if ( isset( $data['estadoFichaje'] ) ) {

			$estadoFichaje = $data['estadoFichaje'];

			$qb2->andWhere( 'cj2.' . $estadoFichaje . ' = true' );

		}

		$fechaRegistroDesde = new \DateTime( '2017-1-1' );
		$fechaRegistroHasta = new \DateTime( '2200-12-31' );
		if ( isset( $data['fechaRegistroDesde'] ) ) {
			$fechaRegistroDesde = $data['fechaRegistroDesde'];
		}
		if ( isset( $data['fechaRegistroHasta'] ) ) {
			$fechaRegistroHasta = $data['fechaRegistroHasta'];
		}

		$qb2->andWhere( 'cj2.fechaCreacion between :desde AND :hasta' );
		$qb2->setParameter( 'desde', $fechaRegistroDesde );
		$qb2->setParameter( 'hasta', $fechaRegistroHasta );


		return $qb2;
	}

	public function getCountAllJugadoresCompetitivos() {
		$qb = $this->createQueryBuilder( 'cj' );
		$qb->select( 'COUNT(cj.id)' );


		$qb->andWhere( 'cj.anio = :anio' );

		$qb->andWhere( 'cj.confirmadoUnion = true' );

		$qb->setParameter( 'anio', date( 'Y' ) );


		$endDate = new \DateTime( 'now' );
		$endDate->modify( '-14 years' );

		$qb->innerJoin( 'cj.jugador', 'jugador' )
		   ->innerJoin( 'jugador.persona', 'persona' )
		   ->andWhere( 'persona.fechaNacimiento < :anios' )
		   ->setParameter( 'anios', $endDate );

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findSolicitudPendiente( $persona ) {
		$qb = $this->createQueryBuilder( 'cj' );

		$qb->innerJoin( 'cj.jugador', 'jugador' );
		$qb->where( 'jugador.persona = :persona' );
		$qb->setParameter( 'persona', $persona );
		$qb->andWhere( 'cj.anio = :anio' );
		$qb->setParameter( 'anio', date( 'Y' ) );

		return $qb->getQuery()->getResult();
	}

}
